        MOV R0,#0x600                   ; U REGISTAR R0 SE POSTAVLJA VRIJEDNOST POCETNE ADRESE BLOKA PODATAKA
        LDMIA R0!,{R1,R2,R3}            ; UČITAVA SE 1. STRUKTURA PODATAKA, 1. OPERAND U R1, 2. U R2, ZADANA OPERACIJA U R3, R0 SADA POKAZJE NA SLJEDECU STRUKTURU
        MVNS R4,R3                      ; U R4 REGISTRU SE IZRACUNAVA KOMPLEMENT OD TRENUTNOG OPERATORA, I AKO JE ON 0 TO ZNACI DA JE TO ZADNJA STRUKTRUA U BLOKU
        MOV R5,#0x2000                  ; U REGISTAR R5 SE POSTVLJA POCETNA ADRESA BLOKA REZULTATA
        MOV R6,#0                       ; U REGISTAR R6 SE POHRANJUJE REZULTAT OPERACIJE
        MOV SP,#0x4000                 ; INICIJALIZIRAM STOG, RAZMAK JE DOVOLJNO VELIK DA SE PODACI CIJE SE ADRESE SMANJUJE U SOTGU NIKADA NECE DODIRNUTI SA SPREMLJENIM PODACIMA REZULTATA PROGRAMA
        BEQ ZADNJA_S                    ; AKO JE SADRZAJ REGISTRA R4 JEDNAK 0, SKOCI NA ZADNJA_S

PETLJA  CMP R3,#0                       ; USPOREDI STANJE REGISTRA SA 0, AKO JE UVJET ISTINIT RIJEC JE O OPERACIJI ODUZIMANJA
        SUBEQ R6,R1,R2                  ; U REGISTAR R6 SE IZRAČUNAVA VRIJEDNOST RAZLIKE R1 (1. OPERAND) - R2 (2. OPERAND)
        STMEQIA R5!,{R6}                ; SPREMA VRIJEDNOST REZULTATA ODUZIMANJA, UKOLIKO JE DOSLO DO ODUZIMANJA, NA SLJEDECU MEMORISJSKU LOKACIJU REZULTATA, VRIJENDOST U R5 SE POVECA DA POKAZUJE NA SLJEDECU ADRESU
        BEQ SLJED_S

        CMP R3,#1                       ; -||- , AKO JE UVJET ISTINIT RIJEC JE O OPERACIJI ZBRAJANJA
        ADDEQ R6,R1,R2                  ; ZBROJI 1. I 2. OPERAND, R6 = R1 + R2
        STMEQIA R5!,{R6}                ; SPREMA SE NA ODGOVARAJUCE MJESTO U MEMORIJI I VRIJEDNOST REGISTRA R5 SE POVECAVA
        BEQ SLJED_S

        CMP R3,#2                       ; -||- , AKO JE UVJET ISTINIT RIJEC JE O OPERACIJI MNOŽENJA
        MULEQ R6,R1,R2                  ; U REGISTAR R6 SE SPREMA UMNOZAK 1. I 2. OPERANDA
        STMEQIA R5!,{R6}                ; SPREMA SE NA ODGOVARAJUCE MJESTO U MEMORIJI I VRIJEDNOST REGISTRA R5 SE POVECAVA
        BEQ SLJED_S

        ;TU JE JOS POTREBNO ISTO NAPRAVITI I ZA DJELEJNJE SAMO STO JE ZA DJELJENJE POTREBNO IMPLEMNETIRATI FUNKCIJU
        CMP R3,#3
        STMEQFD SP!,{R1,R2,R6}          ; STAVLJAM VRIJENDOSTI OBA DVA ARGUMENTA I REZEVRIVRAM MJESTO NA KOJE SU POSTAVITI RJESENJE      
        BLEQ DIJELI                     ; POZIVA SE METODA ZA DIJELJENJE
        ADDEQ SP,SP,#8                     ; SA STOGA MICEM OBA DVA OPERNADA I SP SADA POKAZUJE NA VRIJEDNOST REZULTATA
        STR SP, DEBUG               ; !!!!!!! DODATAN KOD ZA DEBAGINARNJE
        LDREQ R6,[SP]                   ; UCITAJ U R6 REZULTAT DJELJENJA
        STMEQIA R5!,{R6}                ; SPREMI VRIJEDNOST SA R6 NA ODGOVARAJUCE MJESTO U DIO MEMORIJE ZA REZULTATE
        BEQ SLJED_S

        ;AKO NITSA OD OVOG NIJE ISTINITO, TO ZNACI DA SMO DOSLI DO ZADNJE STRUKTURE:
        B ZADNJA_S

SLJED_S CMP R3,#5                       ; S OVOM NAREDBOM RESETIRAM C ZASTAVICU ZA SLJEDECU PETLJU, VRLO VJEROVATNO I NEPOTREBNA ALI MI LIJEPO IZGLEDA
        LDMIA R0!,{R1,R2,R3}            ; UČITAVA SE 1. STRUKTURA PODATAKA, 1. OPERAND U R1, 2. U R2, ZADANA OPERACIJA U R3, R0 SADA POKAZJE NA SLJEDECU STRUKTURU
        B PETLJA


ZADNJA_S STMIA R5!,{R3}                 ; AKO JE ZADNJA STUKTURA ONDA SADRZAJ REGISTRA R3 KOJI JE JEDANK 0xFFFF FFFF SPRMEI KAO ZADNJU VRIJENDOST U BLOK REZULTATA

        SWI 123456                      ; KRAJ PROGRAMA

MASKA DW 0x80000000



DIJELI  STMFD SP!,{R7,R8,R9,R10}            ; DODAJEM REGISTRE R7 I R8 I R9 NA STOG, TJ DODAJEM IH U KONTEKST DA IH MOGU KORISTITI KAKO OCU
        LDR R7,[SP,#16]                 ; U R7 SPREMAM VRIJENDOSTI 1. OPERANDA
        LDR R8,[SP,#20]                 ; U R8 SPREMAM VRIJENDOST 2. OPERANDA
        LDR R10,MASKA                   ; U R10 SPREMAM VRIJENDOST MASKE
        
        CMP R8,#0                       ; VIDI DALI JE DRUGI OPERAND JEDNAK 0 AKO JE VRATI 0
        MOVEQ R9,#0                    ; ONDA NA R9 KOJI SPREMA VRIJENDOSR REZULTATA STAVI VRIJENDOST 0
        BEQ SKOK                        ; TAKODER SKOCI NA KRAJ FUNKCIJE

        ANDS R9,R7,R10                  ; OBAVLJA SE AND OPERACIJA IZMEDU 1. OPERNADA I MASKE, SVE SE MICE OSIM VODECE JEDINICE 
        RSBNE R7,R7,#0                   ; U R7 SE SPRMEILA APSULUTNA VRIJENDOST UKOLIKO JE BROJ BIO NEGATIVAN

        ANDS R9,R8,R10                  ; ISTA STVAR SAMO ZA REGISTAR R8
        RSBNE R8,R8,#0                  ; U R8 SE SPREMI APSULUTNA VRIJENDOST OD SAMOG SEBE 

        MOV R9,#0                       ; RESTIRAM NAS BROJAC UJEDNO I REZULTAT NA 0

PETLJA1  CMP R7,R8                       ; USPREDI 1. I 2. OPERAND
        BLO SKOK
        SUB R7,R7,R8                    ; UMANJI R7 ZA R8
        ADD R9,R9,#1                    ; UVECAJ VRIJEDNOST BROJACA, TJ REGISTRA R9 ZA 1
        B PETLJA1
SKOK    ; EKSPIREMENTALNI DIO, IDEJA JE ZADRZAT ODGOVARAJUCI PREDZANK
        LDR R7,[SP,#16]                 ; U R7 SPREMAM VRIJENDOSTI 1. OPERANDA
        LDR R8,[SP,#20]                 ; U R8 SPREMAM VRIJENDOST 2. OPERANDA
        CMP R7,#0
        RSBMI R9,R9,#0
        CMP R8,#0
        RSBMI R9,R9,#0


        STR R9,[SP,#24]                 ; NA STOG NA NAJVECU ADRESU POHRANJUJEM REZULTAT
        CMP R9,R9                       ; PONOVNO SETIRAM Z ZASTAVICU ZA GLAVNI PROGRAM
        LDMFD SP!,{R7,R8,R9,R10}        ; VRACAM STARE VRIJENDOSTI U REGISTRE IZ KONTEKSTA, SP POKAZUJE NA 1. OPERAND
        STR SP, DEBUG               ; !!!!!!! DODATAN KOD ZA DEBAGINARNJE
        MOV PC,LR                       ; VRACAM SE U GLAVNI PROGRAM, SP POKAZUJE NA 1. OPERNAD


DEBUG DW 0







        ORG 0x600
START_D DW 0xFFFFFEFF, 0x00000010, 0x00000003
        DW 0x000001F4, 0xFFFFFD44, 0x00000000
        DW 0x00000003, 0xFFFFFFEC, 0x00000001
        DW 0xFFFFFFFE, 0x0000000A, 0x00000002
        DW 0xFFFFF000, 0xFFFFFFC0, 0x00000003
        DW 0x00000001, 0x00000004, 0xFFFFFFFF

        
        ORG 0x2000 
START_R DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
                



        ORG 0x3FE0
STACK_M DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
